{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/Form.js","Components/Application.js","App.js","serviceWorker.js","index.js"],"names":["Card","profile","this","props","className","style","src","avatar_url","name","company","Component","CardList","profiles","map","key","id","Form","state","userName","handleSubmit","event","a","preventDefault","axios","get","resp","console","log","onSubmit","data","setState","type","value","onChange","target","placeholder","required","Application","addNewProfile","profileData","prevState","title","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gWAiBeA,E,iLAbZ,IAAMC,EAAUC,KAAKC,MACrB,OACE,yBAAKC,UAAU,OAAOC,MAAO,CAAE,UAAY,QACzC,yBAAKD,UAAU,eAAeE,IAAKL,EAAQM,aAC1C,yBAAKH,UAAU,aACb,wBAAIA,UAAU,cAAcH,EAAQO,MACpC,uBAAGJ,UAAU,aAAaH,EAAQQ,e,GARzBC,aCQJC,MAPf,SAAkBR,GACd,OACI,yBAAKC,UAAU,aACZD,EAAMS,SAASC,IAAI,SAAAZ,GAAO,OAAI,kBAAC,EAAD,eAAMa,IAAKb,EAAQc,IAAQd,Q,yCCiCrDe,E,2MAnCbC,MAAQ,CAAEC,SAAU,I,EAErBC,a,sCAAe,WAAOC,GAAP,eAAAC,EAAA,4DACbD,EAAME,iBADO,SAEOC,IAAMC,IAAN,uCAA0C,EAAKP,MAAMC,WAF5D,OAENO,EAFM,OAGZC,QAAQC,IAAIF,GACZ,EAAKtB,MAAMyB,SAASH,EAAKI,MACzB,EAAKC,SAAS,CAAEZ,SAAU,KALd,yC,8HAQL,IAAD,OACP,OAEE,0BAAMU,SAAU1B,KAAKiB,cAClB,yBAAKf,UAAU,eACb,2BACEA,UAAU,eACV2B,KAAK,SACLC,MAAO9B,KAAKe,MAAMC,SAClBe,SAAU,SAAAb,GAAK,OAAI,EAAKU,SAAS,CAAEZ,SAAUE,EAAMc,OAAOF,SAC1DG,YAAY,kBACZC,UAAQ,IAEV,4BAAQhC,UAAU,mBAAlB,gB,GAxBSM,aC4BJ2B,E,YA1BX,WAAYlC,GAAQ,IAAD,8BACjB,4CAAMA,KAORmC,cAAgB,SAACC,GACb,EAAKT,SAAS,SAAAU,GAAS,MAAK,CAC1B5B,SAAS,GAAD,mBAAM4B,EAAU5B,UAAhB,CAA0B2B,QAPtC,EAAKtB,MAAQ,CACXL,SAAU,IAJK,E,sEAcf,OACE,yBAAKR,UAAU,aACb,yBAAKA,UAAU,aACb,4BAAKF,KAAKC,MAAMsC,OAChB,kBAAC,EAAD,CAAMb,SAAU1B,KAAKoC,gBACrB,kBAAC,EAAD,CAAU1B,SAAUV,KAAKe,MAAML,iB,GApBnBF,aCUXgC,MATf,WAEE,OACE,yBAAKtC,UAAU,OACb,kBAAC,EAAD,CAAaqC,MAAM,yBCGLE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.485eecba.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Card extends Component {\r\n\trender() {\r\n  \tconst profile = this.props;\r\n  \treturn (\r\n    \t<div className=\"card\" style={{ \"marginTop\":\"1em\"}}>\r\n    \t  <img className=\"card-img-top\" src={profile.avatar_url} />\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">{profile.name}</h5>\r\n          <p className=\"card-text\">{profile.company}</p>\r\n        </div>\r\n    \t</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card\r\n","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nfunction CardList(props) {\r\n    return (\r\n        <div className=\"container\">\r\n          {props.profiles.map(profile => <Card key={profile.id} {...profile}/>)}\r\n        </div>\r\n    )\r\n}\r\nexport default CardList\r\n\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass Form extends Component {\r\n  state = { userName: '' };\r\n  \r\n\thandleSubmit = async (event) => {\r\n  \tevent.preventDefault();\r\n    const resp = await axios.get(`https://api.github.com/users/${this.state.userName}`);\r\n    console.log(resp);\r\n    this.props.onSubmit(resp.data);\r\n    this.setState({ userName: '' });\r\n  };\r\n\r\n\trender() {\r\n  \treturn (\r\n\r\n    \t<form onSubmit={this.handleSubmit}>\r\n        <div className=\"input-group\">\r\n          <input\r\n            className=\"form-control\" \r\n            type=\"search\" \r\n            value={this.state.userName}\r\n            onChange={event => this.setState({ userName: event.target.value })}\r\n            placeholder=\"GitHub username\" \r\n            required \r\n          />\r\n          <button className=\"btn btn-primary\">Search</button>\r\n        </div>\r\n          \r\n          \r\n       \r\n        \r\n    \t</form>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default Form\r\n","import React, { Component } from 'react';\r\nimport CardList from './CardList.js';\r\nimport Form from './Form.js';\r\n\r\nclass Application extends Component {\r\n    constructor(props) {\r\n      super(props)\r\n    \r\n      this.state = {\r\n        profiles: [],\r\n      }\r\n    }\r\n    \r\n    addNewProfile = (profileData) => {\r\n        this.setState(prevState => ({\r\n          profiles: [...prevState.profiles, profileData],\r\n      }));\r\n    };\r\n      render() {\r\n        return (\r\n          <div className='container'>\r\n            <div className=\"jumbotron\">\r\n              <h2>{this.props.title}</h2>\r\n              <Form onSubmit={this.addNewProfile} />\r\n              <CardList profiles={this.state.profiles} />\r\n            </div>\r\n          </div>\r\n        );\r\n      }\t\r\n}\r\n\r\nexport default Application\r\n","import React from 'react'\nimport './App.css';\nimport './mystyle.css';\nimport Application from './Components/Application';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Application title=\"Get GitHub profile\"/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './Bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}